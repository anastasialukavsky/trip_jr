scalar UUID
scalar Date
scalar DateTime
scalar Upload

type Query {
    hotels: [HotelDTO]
    users: [UserDTO!]!
    roomsByHotelId(hotelId: UUID): [RoomDTO!]!
    availableRoomsByHotelId(hotelId:UUID): [RoomDTO]!
    hotelById(id: UUID!): HotelDTO
    userById(id: UUID!): UserDTO
    roomById(id: UUID!): RoomDTO
    bookingsByUserId(userId: UUID): [BookingDTO]
    bookingByIdForUserById(userId: UUID, bookingId: UUID): BookingDTO
    hotelSearch(location: String, checkInDate: Date, checkOutDate: Date ): HotelSearchDTO
}

type HotelSearchDTO {
    hotelId: UUID!
    name: String!
    amenities: [AmenityDTO]!
    roomType: RoomType!
    bedType: BedType!
    rate: RateDTO!
}

type HotelDTO {
    hotelId: UUID
    name: String
    numOfRooms: Int
    description: String
    hotelImageURLs: [String]
    location: LocationDTO
    amenities: [AmenityDTO]
    reviews: [ReviewDTO]
    bookings: [BookingDTO]
    createdAt: DateTime
    updatedAt: DateTime
}
enum RoomType {
    Single
    Double
    Suite
}

enum RoomStatus {
    Vacant
    Occupied
    Reserved
    Maintenance
}

enum BedType {
    Single
    Double
    Queen
    King
}

enum UserRole {
    ADMIN
    USER
    OWNER
}

enum ClaimStatus {
    APPROVED
    REJECTED
    UNCLAIMED
    PENDING
}


type RoomDTO {
    roomId: UUID
    hotelId: UUID
    rate: RateDTO!
    roomNumber:Int!
    roomType: RoomType!
    roomStatus: RoomStatus!
    bedType: BedType!
    maximumOccupancy: Int!
    description: String!
    floor: Int!
    availability: Boolean!
    lastCleaned: DateTime
    createdAt: DateTime!
    updatedAt: DateTime!
}

input RoomInput {
    hotelId: UUID!
    rate: RateInput!
    roomNumber: Int!
    roomType: RoomType!
    roomStatus: RoomStatus!
    bedType: BedType!
    maximumOccupancy: Int!
    description: String!
    floor: Int!
    availability: Boolean!
    #    lastCleaned: DateTime
}



type LocationDTO {
    locationId: UUID
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
    createdAt: DateTime
    updatedAt: DateTime
}

type RateDTO {
    rateId: UUID
    #    hotelId: UUID
    rate: Float!
    month: Int!
    defaultRate: Float!
}

type AmenityDTO {
    amenityId: UUID
    amenityName: String!
    hotelId: UUID
    createdAt: DateTime
    updatedAt: DateTime
}

type HotelClaimDTO {
    claimId: UUID
    hotelId: UUID
    userId: UUID
    status: ClaimStatus
    createdAt: DateTime
    updatedAt: DateTime
}


input HotelInput {
    name: String
    numOfRooms: Int
    description: String
    location: LocationInput
    amenities: [AmenityInput]
}

input LocationInput {
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
}

input RateInput {
    rate: Float!
    month: Int!
    defaultRate: Float!
}

input AmenityInput {
    amenityName: String!
}


type UserDTO {
    userId: UUID!
    email: String!
    firstName: String
    lastName: String
    passwordHash: String!
    reviews: [ReviewDTO]
    bookings: [BookingDTO]
    role: UserRole
    createdAt: DateTime
    updatedAt: DateTime
}

input UserInput {
    email: String!
    firstName: String
    lastName: String
    passwordHash: String!
}

input UpdateUserInput {
    email: String
    firstName: String
    lastName: String
    passwordHash: String
}

type ReviewDTO {
    reviewId: UUID
    userId: UUID
    hotelId: UUID
    rating: Int
    reviewTitle: String
    reviewBody: String
}

input ReviewInput {
    userId: UUID
    hotelId: UUID
    rating: Int
    reviewTitle: String
    reviewBody: String
}

input UpdateReviewInput {
    rating: Int
    reviewTitle: String
    reviewBody: String
}


type BookingDTO {
    bookingId: UUID
    userId: UUID
    hotelId: UUID
    roomDetails: RoomDTO
    guestFirstName: String!
    guestLastName: String!
    numOfGuests: Int!
    occasion: String
    guestNotes: String
    checkInDate: Date
    checkOutDate: Date
    totalCost: Float
    createdAt: DateTime!
    updatedAt: DateTime!
}


input BookingRoomInput {
    roomId: UUID
    rateId: UUID
}

#input UpdateRateInput {
#    rateId: UUID
#    rate: Float!
#    month: Int!
#    defaultRate: Float!
#}


input UpdateRateInput {
    rateId: UUID
    rate: Float
    month: Int
    defaultRate: Float
}

input UpdateRoomInput {
    #    roomId: UUID
    #    hotelId: UUID
    roomNumber: Int
    roomType: RoomType
    roomStatus: RoomStatus
    bedType: BedType
    maximumOccupancy: Int
    description: String
    floor: Int
    rate: UpdateRateInput
    availability: Boolean
    lastCleaned: DateTime
    updatedAt: DateTime
}



input BookingInput {
    userId: UUID
    hotelId: UUID
    guestFirstName: String!
    guestLastName: String!
    numOfGuests: Int!
    occasion: String
    guestNotes: String
    roomDetails: BookingRoomInput
    checkInDate: Date!
    checkOutDate: Date!
}

input UpdateBookingInput {
    guestFirstName: String
    guestLastName: String
    numOfGuests: Int
    occasion: String
    guestNotes: String
    checkInDate: Date
    checkOutDate: Date
    roomDetails: BookingRoomInput
    updateAt: DateTime
    #bring rate input
}

input UpdateHotelInput {
    name: String
    numOfRooms: Int
    description: String
}

input UpdateLocationInput {
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
}

input UpdateAmenityInput {
    amenityName: String
}

type AuthSignInPayload {
    token: String!
    email: String!
}

type Mutation {
    createHotel(hotel: HotelInput, hotelImageURLs: [Upload]) : HotelDTO
    createUser(user: UserInput) : UserDTO
    createReview(review: ReviewInput): ReviewDTO
    createBooking(booking: BookingInput) : BookingDTO
    createRoom(hotelId: UUID!, room: RoomInput) : RoomDTO
    createHotelClaim(hotelId:UUID, userId: UUID) : HotelClaimDTO
    updateRoom(hotelId:UUID, roomId: UUID, room: UpdateRoomInput): RoomDTO
    updateUser(id: UUID, user: UpdateUserInput) : UserDTO
    updateBooking(userId: UUID, bookingId: UUID, booking: UpdateBookingInput) : BookingDTO
    updateReview(userId:UUID, reviewId: UUID, review:UpdateReviewInput) : ReviewDTO
    updateHotel(id: UUID, hotel: UpdateHotelInput) : HotelDTO
    updateLocation(id: UUID, location: UpdateLocationInput) : LocationDTO
    updateAmenity(hotelId: UUID,amenityId: UUID,  amenity: UpdateAmenityInput) : AmenityDTO
    deleteRoom(id: UUID) : Boolean
    deleteUser(id:UUID): Boolean
    deleteHotel(id:UUID): Boolean
    deleteAmenity(id:UUID): Boolean
    deleteLocation(id: UUID): Boolean
    deleteReview(id:UUID): Boolean
    deleteBooking(id:UUID): Boolean
    deleteRate(id: UUID): Boolean
    signIn(email: String!, password: String!): AuthSignInPayload
    signUp(user: UserInput): AuthSignInPayload
}