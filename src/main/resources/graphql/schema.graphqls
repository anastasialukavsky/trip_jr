scalar UUID
scalar Date
scalar DateTime

type Query {
    hotels: [HotelDTO]
    users: [UserDTO!]!
    hotelById(id: UUID!): HotelDTO
    userById(id: UUID!): UserDTO
    bookingsByUserId(userId: UUID): [BookingDTO]
    bookingByIdForUserById(userId: UUID, bookingId: UUID): BookingDTO
}


type HotelDTO {
    hotelId: UUID
    name: String
    numOfRooms: Int
    description: String
    location: LocationDTO
    rates: [RateDTO!]
    amenities: [AmenityDTO]
    reviews: [ReviewDTO]
    bookings: [BookingDTO]
    createdAt: DateTime
    updatedAt: DateTime
}

type LocationDTO {
    locationId: UUID
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
    createdAt: DateTime
    updatedAt: DateTime
}

type RateDTO {
    rateId: UUID
    hotelId: UUID
    rate: Float!
    month: Int!
    defaultRate: Float!
}

type AmenityDTO {
    amenityId: UUID
    amenityName: String!
    hotelId: UUID
}


input HotelInput {
    name: String
    numOfRooms: Int
    description: String
    location: LocationInput
    rates: [RateInput]
    amenities: [AmenityInput]
}

input LocationInput {
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
}

input RateInput {
    rate: Float!
    month: Int!
    defaultRate: Float!
}

input AmenityInput {
    amenityName: String!
}

#enum UserRole {
#    ADMIN
#    USER
#    OWNER
#}

type UserDTO {
    userId: UUID!
    email: String!
    firstName: String
    lastName: String
    passwordHash: String!
    reviews: [ReviewDTO]
    bookings: [BookingDTO]
}

input UserInput {
    email: String!
    firstName: String
    lastName: String
    passwordHash: String!
}

input UpdateUserInput {
    email: String
    firstName: String
    lastName: String
    passwordHash: String
}

type ReviewDTO {
    reviewId: UUID
    userId: UUID
    hotelId: UUID
    rating: Int
    reviewTitle: String
    reviewBody: String
}

input ReviewInput {
    userId: UUID
    hotelId: UUID
    rating: Int
    reviewTitle: String
    reviewBody: String
}

input UpdateReviewInput {
    rating: Int
    reviewTitle: String
    reviewBody: String
}


type BookingDTO {
    bookingId: UUID
    userId: UUID
    hotelId: UUID
    guestFirstName: String!
    guestLastName: String!
    numOfGuests: Int!
    occasion: String
    guestNotes: String
    checkInDate: Date
    checkOutDate: Date
    totalCost: Float
    createdAt: DateTime!
    updatedAt: DateTime!
}


input BookingInput {
    userId: UUID
    hotelId: UUID
    guestFirstName: String!
    guestLastName: String!
    numOfGuests: Int!
    occasion: String
    guestNotes: String
    checkInDate: Date!
    checkOutDate: Date!
}

input UpdateBookingInput {
    guestFirstName: String
    guestLastName: String
    numOfGuests: Int
    occasion: String
    guestNotes: String
    checkInDate: Date
    checkOutDate: Date
}

input UpdateHotelInput {
    name: String
    numOfRooms: Int
    description: String
}

input UpdateLocationInput {
    phoneNumber: String
    address: String
    city: String
    state: String
    zip: String
    latitude: Float
    longitude: Float
}

type Mutation {
    createHotel(hotel: HotelInput) : HotelDTO
    createUser(user: UserInput) : UserDTO
    createReview(review: ReviewInput): ReviewDTO
    createBooking(booking: BookingInput) : BookingDTO
    updateUser(id: UUID, user: UpdateUserInput) : UserDTO
    updateBooking(userId: UUID, bookingId: UUID, hotelId: UUID, booking: UpdateBookingInput) : BookingDTO
    updateReview(userId:UUID, reviewId: UUID, review:UpdateReviewInput) : ReviewDTO
    updateHotel(id: UUID, hotel: UpdateHotelInput) : HotelDTO
    updateLocation(id: UUID, location: UpdateLocationInput) : LocationDTO
}