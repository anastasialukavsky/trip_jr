/*
 * This file is generated by jOOQ.
 */
package com.trip_jr.tripJr.jooq.tables


import com.trip_jr.tripJr.jooq.Public
import com.trip_jr.tripJr.jooq.keys.REVIEW_PKEY
import com.trip_jr.tripJr.jooq.keys.REVIEW__REVIEW_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.keys.REVIEW__REVIEW_USER_ID_FKEY
import com.trip_jr.tripJr.jooq.tables.Hotel.HotelPath
import com.trip_jr.tripJr.jooq.tables.Users.UsersPath
import com.trip_jr.tripJr.jooq.tables.records.ReviewRecord

import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Review(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReviewRecord>?,
    parentPath: InverseForeignKey<out Record, ReviewRecord>?,
    aliased: Table<ReviewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReviewRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.review</code>
         */
        val REVIEW: Review = Review()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReviewRecord> = ReviewRecord::class.java

    /**
     * The column <code>public.review.review_id</code>.
     */
    val REVIEW_ID: TableField<ReviewRecord, UUID?> = createField(DSL.name("review_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.review.user_id</code>.
     */
    val USER_ID: TableField<ReviewRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.review.hotel_id</code>.
     */
    val HOTEL_ID: TableField<ReviewRecord, UUID?> = createField(DSL.name("hotel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.review.rating</code>.
     */
    val RATING: TableField<ReviewRecord, Int?> = createField(DSL.name("rating"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.review.review_title</code>.
     */
    val REVIEW_TITLE: TableField<ReviewRecord, String?> = createField(DSL.name("review_title"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.review.review_body</code>.
     */
    val REVIEW_BODY: TableField<ReviewRecord, String?> = createField(DSL.name("review_body"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<ReviewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReviewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReviewRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.review</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.review</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.review</code> table reference
     */
    constructor(): this(DSL.name("review"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ReviewRecord>?, parentPath: InverseForeignKey<out Record, ReviewRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, REVIEW, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ReviewPath : Review, Path<ReviewRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ReviewRecord>?, parentPath: InverseForeignKey<out Record, ReviewRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ReviewRecord>): super(alias, aliased)
        override fun `as`(alias: String): ReviewPath = ReviewPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ReviewPath = ReviewPath(alias, this)
        override fun `as`(alias: Table<*>): ReviewPath = ReviewPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<ReviewRecord> = REVIEW_PKEY
    override fun getReferences(): List<ForeignKey<ReviewRecord, *>> = listOf(REVIEW__REVIEW_USER_ID_FKEY, REVIEW__REVIEW_HOTEL_ID_FKEY)

    private lateinit var _users: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath {
        if (!this::_users.isInitialized)
            _users = UsersPath(this, REVIEW__REVIEW_USER_ID_FKEY, null)

        return _users;
    }

    val users: UsersPath
        get(): UsersPath = users()

    private lateinit var _hotel: HotelPath

    /**
     * Get the implicit join path to the <code>public.hotel</code> table.
     */
    fun hotel(): HotelPath {
        if (!this::_hotel.isInitialized)
            _hotel = HotelPath(this, REVIEW__REVIEW_HOTEL_ID_FKEY, null)

        return _hotel;
    }

    val hotel: HotelPath
        get(): HotelPath = hotel()
    override fun `as`(alias: String): Review = Review(DSL.name(alias), this)
    override fun `as`(alias: Name): Review = Review(alias, this)
    override fun `as`(alias: Table<*>): Review = Review(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Review = Review(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Review = Review(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Review = Review(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Review = Review(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Review = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Review = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Review = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Review = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Review = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Review = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Review = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Review = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Review = where(DSL.notExists(select))
}
