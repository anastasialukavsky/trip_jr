/*
 * This file is generated by jOOQ.
 */
package com.trip_jr.tripJr.jooq.tables.records


import com.trip_jr.tripJr.jooq.tables.Rate

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RateRecord() : UpdatableRecordImpl<RateRecord>(Rate.RATE) {

    open var rateId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var rate: Double?
        set(value): Unit = set(1, value)
        get(): Double? = get(1) as Double?

    open var month: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var defaultRate: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    open var updatedAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised RateRecord
     */
    constructor(rateId: UUID? = null, rate: Double? = null, month: Int? = null, defaultRate: Double? = null, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null): this() {
        this.rateId = rateId
        this.rate = rate
        this.month = month
        this.defaultRate = defaultRate
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
