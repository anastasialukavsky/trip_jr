/*
 * This file is generated by jOOQ.
 */
package com.trip_jr.tripJr.jooq.tables.records


import com.trip_jr.tripJr.jooq.enums.BedType
import com.trip_jr.tripJr.jooq.enums.RoomStatus
import com.trip_jr.tripJr.jooq.enums.RoomType
import com.trip_jr.tripJr.jooq.tables.Room

import java.math.BigDecimal
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RoomRecord() : UpdatableRecordImpl<RoomRecord>(Room.ROOM) {

    open var roomNumber: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var roomType: RoomType?
        set(value): Unit = set(1, value)
        get(): RoomType? = get(1) as RoomType?

    open var roomStatus: RoomStatus?
        set(value): Unit = set(2, value)
        get(): RoomStatus? = get(2) as RoomStatus?

    open var bedType: BedType?
        set(value): Unit = set(3, value)
        get(): BedType? = get(3) as BedType?

    open var maximumOccupancy: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var rate: BigDecimal?
        set(value): Unit = set(5, value)
        get(): BigDecimal? = get(5) as BigDecimal?

    open var description: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var floor: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var availability: Boolean?
        set(value): Unit = set(8, value)
        get(): Boolean? = get(8) as Boolean?

    open var lastCleaned: OffsetDateTime?
        set(value): Unit = set(9, value)
        get(): OffsetDateTime? = get(9) as OffsetDateTime?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(10, value)
        get(): OffsetDateTime? = get(10) as OffsetDateTime?

    open var updatedAt: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    open var hotelId: UUID?
        set(value): Unit = set(12, value)
        get(): UUID? = get(12) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised RoomRecord
     */
    constructor(roomNumber: Int? = null, roomType: RoomType? = null, roomStatus: RoomStatus? = null, bedType: BedType? = null, maximumOccupancy: Int? = null, rate: BigDecimal? = null, description: String? = null, floor: Int? = null, availability: Boolean? = null, lastCleaned: OffsetDateTime? = null, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null, hotelId: UUID? = null): this() {
        this.roomNumber = roomNumber
        this.roomType = roomType
        this.roomStatus = roomStatus
        this.bedType = bedType
        this.maximumOccupancy = maximumOccupancy
        this.rate = rate
        this.description = description
        this.floor = floor
        this.availability = availability
        this.lastCleaned = lastCleaned
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.hotelId = hotelId
        resetChangedOnNotNull()
    }
}
