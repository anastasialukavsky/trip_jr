/*
 * This file is generated by jOOQ.
 */
package com.trip_jr.tripJr.jooq.tables.records


import com.trip_jr.tripJr.jooq.tables.Booking

import java.math.BigDecimal
import java.time.LocalDate
import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookingRecord() : UpdatableRecordImpl<BookingRecord>(Booking.BOOKING) {

    open var bookingId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var userId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var hotelId: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var checkInDate: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    open var checkOutDate: LocalDate?
        set(value): Unit = set(4, value)
        get(): LocalDate? = get(4) as LocalDate?

    open var totalCost: BigDecimal?
        set(value): Unit = set(5, value)
        get(): BigDecimal? = get(5) as BigDecimal?

    open var guestFirstName: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var guestLastName: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var numOfGuests: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var occasion: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var guestNotes: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    open var updatedAt: OffsetDateTime?
        set(value): Unit = set(12, value)
        get(): OffsetDateTime? = get(12) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised BookingRecord
     */
    constructor(bookingId: UUID? = null, userId: UUID? = null, hotelId: UUID? = null, checkInDate: LocalDate? = null, checkOutDate: LocalDate? = null, totalCost: BigDecimal? = null, guestFirstName: String? = null, guestLastName: String? = null, numOfGuests: Int? = null, occasion: String? = null, guestNotes: String? = null, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null): this() {
        this.bookingId = bookingId
        this.userId = userId
        this.hotelId = hotelId
        this.checkInDate = checkInDate
        this.checkOutDate = checkOutDate
        this.totalCost = totalCost
        this.guestFirstName = guestFirstName
        this.guestLastName = guestLastName
        this.numOfGuests = numOfGuests
        this.occasion = occasion
        this.guestNotes = guestNotes
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
