/*
 * This file is generated by jOOQ.
 */
package com.trip_jr.tripJr.jooq.tables


import com.trip_jr.tripJr.jooq.Public
import com.trip_jr.tripJr.jooq.keys.AMENITY__AMENITY_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.keys.BOOKING__BOOKING_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.keys.HOTEL_LOCATION_ID_KEY
import com.trip_jr.tripJr.jooq.keys.HOTEL_PKEY
import com.trip_jr.tripJr.jooq.keys.HOTEL__FK_LOCATION
import com.trip_jr.tripJr.jooq.keys.RATE__FK_HOTEL
import com.trip_jr.tripJr.jooq.keys.RATE__RATE_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.keys.REVIEW__REVIEW_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.keys.ROOM__ROOM_HOTEL_ID_FKEY
import com.trip_jr.tripJr.jooq.tables.Amenity.AmenityPath
import com.trip_jr.tripJr.jooq.tables.Booking.BookingPath
import com.trip_jr.tripJr.jooq.tables.Location.LocationPath
import com.trip_jr.tripJr.jooq.tables.Rate.RatePath
import com.trip_jr.tripJr.jooq.tables.Review.ReviewPath
import com.trip_jr.tripJr.jooq.tables.Room.RoomPath
import com.trip_jr.tripJr.jooq.tables.records.HotelRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Hotel(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, HotelRecord>?,
    parentPath: InverseForeignKey<out Record, HotelRecord>?,
    aliased: Table<HotelRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<HotelRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.hotel</code>
         */
        val HOTEL: Hotel = Hotel()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<HotelRecord> = HotelRecord::class.java

    /**
     * The column <code>public.hotel.hotel_id</code>.
     */
    val HOTEL_ID: TableField<HotelRecord, UUID?> = createField(DSL.name("hotel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.hotel.name</code>.
     */
    val NAME: TableField<HotelRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.hotel.location_id</code>.
     */
    val LOCATION_ID: TableField<HotelRecord, UUID?> = createField(DSL.name("location_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.hotel.num_of_rooms</code>.
     */
    val NUM_OF_ROOMS: TableField<HotelRecord, Int?> = createField(DSL.name("num_of_rooms"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.hotel.description</code>.
     */
    val DESCRIPTION: TableField<HotelRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.hotel.created_at</code>.
     */
    val CREATED_AT: TableField<HotelRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.hotel.updated_at</code>.
     */
    val UPDATED_AT: TableField<HotelRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<HotelRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<HotelRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<HotelRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.hotel</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.hotel</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.hotel</code> table reference
     */
    constructor(): this(DSL.name("hotel"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, HotelRecord>?, parentPath: InverseForeignKey<out Record, HotelRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, HOTEL, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class HotelPath : Hotel, Path<HotelRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, HotelRecord>?, parentPath: InverseForeignKey<out Record, HotelRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<HotelRecord>): super(alias, aliased)
        override fun `as`(alias: String): HotelPath = HotelPath(DSL.name(alias), this)
        override fun `as`(alias: Name): HotelPath = HotelPath(alias, this)
        override fun `as`(alias: Table<*>): HotelPath = HotelPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<HotelRecord> = HOTEL_PKEY
    override fun getUniqueKeys(): List<UniqueKey<HotelRecord>> = listOf(HOTEL_LOCATION_ID_KEY)
    override fun getReferences(): List<ForeignKey<HotelRecord, *>> = listOf(HOTEL__FK_LOCATION)

    private lateinit var _location: LocationPath

    /**
     * Get the implicit join path to the <code>public.location</code> table.
     */
    fun location(): LocationPath {
        if (!this::_location.isInitialized)
            _location = LocationPath(this, HOTEL__FK_LOCATION, null)

        return _location;
    }

    val location: LocationPath
        get(): LocationPath = location()

    private lateinit var _amenity: AmenityPath

    /**
     * Get the implicit to-many join path to the <code>public.amenity</code>
     * table
     */
    fun amenity(): AmenityPath {
        if (!this::_amenity.isInitialized)
            _amenity = AmenityPath(this, null, AMENITY__AMENITY_HOTEL_ID_FKEY.inverseKey)

        return _amenity;
    }

    val amenity: AmenityPath
        get(): AmenityPath = amenity()

    private lateinit var _booking: BookingPath

    /**
     * Get the implicit to-many join path to the <code>public.booking</code>
     * table
     */
    fun booking(): BookingPath {
        if (!this::_booking.isInitialized)
            _booking = BookingPath(this, null, BOOKING__BOOKING_HOTEL_ID_FKEY.inverseKey)

        return _booking;
    }

    val booking: BookingPath
        get(): BookingPath = booking()

    private lateinit var _fkHotel: RatePath

    /**
     * Get the implicit to-many join path to the <code>public.rate</code> table,
     * via the <code>fk_hotel</code> key
     */
    fun fkHotel(): RatePath {
        if (!this::_fkHotel.isInitialized)
            _fkHotel = RatePath(this, null, RATE__FK_HOTEL.inverseKey)

        return _fkHotel;
    }

    val fkHotel: RatePath
        get(): RatePath = fkHotel()

    private lateinit var _rateHotelIdFkey: RatePath

    /**
     * Get the implicit to-many join path to the <code>public.rate</code> table,
     * via the <code>rate_hotel_id_fkey</code> key
     */
    fun rateHotelIdFkey(): RatePath {
        if (!this::_rateHotelIdFkey.isInitialized)
            _rateHotelIdFkey = RatePath(this, null, RATE__RATE_HOTEL_ID_FKEY.inverseKey)

        return _rateHotelIdFkey;
    }

    val rateHotelIdFkey: RatePath
        get(): RatePath = rateHotelIdFkey()

    private lateinit var _review: ReviewPath

    /**
     * Get the implicit to-many join path to the <code>public.review</code>
     * table
     */
    fun review(): ReviewPath {
        if (!this::_review.isInitialized)
            _review = ReviewPath(this, null, REVIEW__REVIEW_HOTEL_ID_FKEY.inverseKey)

        return _review;
    }

    val review: ReviewPath
        get(): ReviewPath = review()

    private lateinit var _room: RoomPath

    /**
     * Get the implicit to-many join path to the <code>public.room</code> table
     */
    fun room(): RoomPath {
        if (!this::_room.isInitialized)
            _room = RoomPath(this, null, ROOM__ROOM_HOTEL_ID_FKEY.inverseKey)

        return _room;
    }

    val room: RoomPath
        get(): RoomPath = room()
    override fun `as`(alias: String): Hotel = Hotel(DSL.name(alias), this)
    override fun `as`(alias: Name): Hotel = Hotel(alias, this)
    override fun `as`(alias: Table<*>): Hotel = Hotel(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Hotel = Hotel(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Hotel = Hotel(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Hotel = Hotel(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Hotel = Hotel(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Hotel = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Hotel = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Hotel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Hotel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Hotel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Hotel = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Hotel = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Hotel = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Hotel = where(DSL.notExists(select))
}
